// <auto-generated />
using System;
using FusionNews_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FusionNews_API.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Application.Entities.Base.CommentOfPost", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("comment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<int>("PostId")
                        .HasColumnType("integer")
                        .HasColumnName("post_id");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("comment_of_post", (string)null);
                });

            modelBuilder.Entity("Application.Entities.Base.NewsOfPost", b =>
                {
                    b.Property<int>("NewsOfPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("news_of_post_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NewsOfPostId"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("NewsOfPostId");

                    b.ToTable("news_of_post", (string)null);
                });

            modelBuilder.Entity("Application.Entities.Base.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("post_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PostId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<int>("NewsOfPostId")
                        .HasColumnType("integer")
                        .HasColumnName("news_of_post_id");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tag_id");

                    b.Property<string>("TagId1")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("PostId");

                    b.HasIndex("NewsOfPostId")
                        .IsUnique();

                    b.HasIndex("TagId")
                        .IsUnique();

                    b.HasIndex("TagId1");

                    b.ToTable("post", (string)null);
                });

            modelBuilder.Entity("Application.Entities.Base.Tag", b =>
                {
                    b.Property<string>("TagId")
                        .HasColumnType("text")
                        .HasColumnName("tag_id");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("TagId");

                    b.ToTable("tag", (string)null);
                });

            modelBuilder.Entity("Application.Entities.Base.CommentOfPost", b =>
                {
                    b.HasOne("Application.Entities.Base.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Application.Entities.Base.Post", b =>
                {
                    b.HasOne("Application.Entities.Base.NewsOfPost", "NewsOfPost")
                        .WithOne("Post")
                        .HasForeignKey("Application.Entities.Base.Post", "NewsOfPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Entities.Base.Tag", "Tag")
                        .WithOne()
                        .HasForeignKey("Application.Entities.Base.Post", "TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Entities.Base.Tag", null)
                        .WithMany("Posts")
                        .HasForeignKey("TagId1");

                    b.Navigation("NewsOfPost");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Application.Entities.Base.NewsOfPost", b =>
                {
                    b.Navigation("Post")
                        .IsRequired();
                });

            modelBuilder.Entity("Application.Entities.Base.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Application.Entities.Base.Tag", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
